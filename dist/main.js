(()=>{"use strict";var e={d:(t,n)=>{for(var r in n)e.o(n,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:n[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(e){let t=document.querySelector("#newTask"),n=document.querySelector("#date"),r=document.createElement("div");r.classList.add("task");let o=document.createElement("span");o.textContent=e.name,o.id="taskName";let a=document.createElement("span");a.textContent=e.date,a.id="taskDate";let i=document.createElement("div");i.textContent=e.urgency,i.id="taskUrgency";let d=document.createElement("img");d.src="../dist/edit.png",d.setAttribute("id","taskIcon"),d.addEventListener("click",(()=>{!function(e){let t=document.createElement("div");t.classList.add("editTodo");let n=document.createElement("input");n.id="editTodoName",n.type="text",n.placeholder="New name",n.required=!0;let r=document.createElement("input");r.id="editTodoDate",r.type="date",r.required=!0;let o=document.createElement("select");o.id="editTodoUrgency";let a=document.createElement("option");a.value="urgent",a.textContent="Urgent";let i=document.createElement("option");i.value="nonurgent",i.textContent="Nonurgent",o.appendChild(a),o.appendChild(i);let d=document.createElement("button");d.id="editButton",d.type="button",d.textContent="Update",d.addEventListener("click",(()=>{e=function(e){let t=document.querySelector("#editTodoName"),n=document.querySelector("#editTodoDate"),r=document.querySelector("#editTodoUrgency");return e.name=t.value,e.date=n.value,e.urgency=r.value,e}(e),l.removeChild(c),l.removeChild(t);let n=T(),r=w();console.log(n.id),y(n.id,r),localStorage.setItem("projects",JSON.stringify(r))})),t.appendChild(n),t.appendChild(r),t.appendChild(o),t.appendChild(d);let c=document.createElement("div");c.classList.add("overlay");let l=document.getElementsByTagName("body")[0];l.appendChild(c),l.appendChild(t)}(e)}));let c=document.createElement("img");c.src="../dist/remove.png",c.setAttribute("id","taskIcon"),c.addEventListener("click",(()=>{!function(e){let t=T(),n=t.todos.find((t=>t.index==e)).index;t.todos.splice(n,1);let r=0;t.todos.forEach((e=>{e.index=r,r++}));let o=w();y(t.id,o),localStorage.setItem("projects",JSON.stringify(o))}(e.index)})),r.appendChild(o),r.appendChild(a),r.appendChild(i),r.appendChild(d),r.appendChild(c),document.querySelector(".allTodos").appendChild(r),t.value="",n.value=""}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function o(e){r(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===n(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}e.d({},{vo:()=>T,mW:()=>w,$w:()=>D,id:()=>C}),Math.pow(10,8);var a=6e4,i=36e5;function d(e,t){var n;r(1,arguments);var o=function(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==o&&1!==o&&0!==o)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var d,y=function(e){var t,n={},r=e.split(c.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],c.timeZoneDelimiter.test(n.date)&&(n.date=e.split(c.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var o=c.timezone.exec(t);o?(n.time=t.replace(o[1],""),n.timezone=o[1]):n.time=t}return n}(e);if(y.date){var v=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var o=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?o:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(y.date,o);d=function(e,t){if(null===t)return new Date(NaN);var n=e.match(l);if(!n)return new Date(NaN);var r=!!n[4],o=m(n[1]),a=m(n[2])-1,i=m(n[3]),d=m(n[4]),c=m(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,d,c)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var o=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+o),r}(t,d,c):new Date(NaN);var u=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(g[t]||(f(e)?29:28))}(t,a,i)&&function(e,t){return t>=1&&t<=(f(e)?366:365)}(t,o)?(u.setUTCFullYear(t,a,Math.max(o,i)),u):new Date(NaN)}(v.restDateString,v.year)}if(!d||isNaN(d.getTime()))return new Date(NaN);var S,N=d.getTime(),h=0;if(y.time&&(h=function(e){var t=e.match(u);if(!t)return NaN;var n=p(t[1]),r=p(t[2]),o=p(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,o)?n*i+r*a+1e3*o:NaN}(y.time),isNaN(h)))return new Date(NaN);if(!y.timezone){var E=new Date(N+h),T=new Date(0);return T.setFullYear(E.getUTCFullYear(),E.getUTCMonth(),E.getUTCDate()),T.setHours(E.getUTCHours(),E.getUTCMinutes(),E.getUTCSeconds(),E.getUTCMilliseconds()),T}return S=function(e){if("Z"===e)return 0;var t=e.match(s);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),o=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,o)?n*(r*i+o*a):NaN}(y.timezone),isNaN(S)?new Date(NaN):new Date(N+h+S)}var c={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},l=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,s=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(e){return e?parseInt(e):1}function p(e){return e&&parseFloat(e.replace(",","."))||0}var g=[31,null,31,30,31,30,31,31,30,31,30,31];function f(e){return e%400==0||e%4==0&&e%100!=0}function y(e,n){document.getElementById(e).classList="projectFocused";let a=n[e];return document.querySelector(".allTodos").innerHTML="",a=function(e){return e.todos.sort(((e,t)=>function(e,t){r(2,arguments);var n=o(e),a=o(t),i=n.getTime()-a.getTime();return i<0?-1:i>0?1:i}(d(e.date),d(t.date)))),e}(a),a.todos.forEach((e=>{t(e)})),D(a),a}const v=(e,t)=>({name:e,todos:[],id:t});function S(e,t){let n=document.createElement("div");n.classList.add("addedProject"),n.setAttribute("id",t);let r=document.createElement("span");r.textContent=e,r.addEventListener("click",(e=>{y(e.target.parentElement.id,w())}));let o=document.createElement("img");return o.src="remove.png",o.setAttribute("id","removeIcon"),o.addEventListener("click",(()=>{console.log(t),function(e){let t=w(),n=t.findIndex((t=>t.id==e));t.splice(n,1),C(t),document.querySelector(".allProjects").innerHTML="";let r=0;t.forEach((e=>{S(e.name,r),r++})),localStorage.setItem("projects",JSON.stringify(t))}(t)})),n.appendChild(r),n.appendChild(o),document.querySelector(".allProjects").appendChild(n),v(e,t)}let N=JSON.parse(localStorage.getItem("projects"))||[],h=JSON.parse(localStorage.getItem("currentProject"))||v("currentProject",0);console.log(N);let E=0;function T(){return h}function w(){return N}function C(e){N=e}function D(e){h=e}N.forEach((e=>{e.id=E,S(e.name,E),y(h.id,N),E++})),document.querySelector("#projectButton").addEventListener("click",(()=>{if(""!=document.querySelector("#newProject").value){let e=document.querySelector("#newProject");console.log(E);let t=S(e.value,E);N.push(t),localStorage.setItem("projects",JSON.stringify(N)),e.value="",E++}})),document.querySelector("#todoButton").addEventListener("click",(e=>{if(""!=document.querySelector("#newTask").value){let e={name:document.querySelector("#newTask").value,date:document.querySelector("#date").value,urgency:document.querySelector("#urgency").value,index:T().todos.length};h.todos.push(e),t(e),localStorage.setItem("projects",JSON.stringify(N)),y(h.id,N)}else document.querySelector("#newTask").value="Enter task name",document.querySelector("#newTask").addEventListener("click",(()=>{document.querySelector("#newTask").value=""}))})),document.addEventListener("mousedown",(e=>{let t=document.querySelector(".projectFocused");e.target.parentElement&&e.target.parentElement.classList.contains("addedProject")&&t&&document.querySelectorAll(".projectFocused").forEach((e=>{e.classList="addedProject"}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,